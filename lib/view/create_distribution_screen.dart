/*import 'package:flutter/material.dart';
import '../model/distribution_model.dart';
import '../services/distribution_services.dart';

class CreateDistributionScreen extends StatefulWidget {
  final VoidCallback onCreated;

  CreateDistributionScreen({required this.onCreated});

  @override
  _CreateDistributionScreenState createState() => _CreateDistributionScreenState();
}

class _CreateDistributionScreenState extends State<CreateDistributionScreen> {
  final _formKey = GlobalKey<FormState>();
  final _vehiclePlateController = TextEditingController();
  final _dateController = TextEditingController();
  final _officerNameController = TextEditingController();
  final _boxQtyController = TextEditingController();

  void _createDistribution() async {
    if (_formKey.currentState?.validate() ?? false) {
      final distribution = Distribution(
        id: '', // Server will generate this
        guid: '', // Placeholder or should be generated by the server
        guidCompany: '', // Placeholder or should be generated by the server
        vehiclePlate: _vehiclePlateController.text,
        date: _dateController.text,
        officerName: _officerNameController.text,
        guidOfficer: '', // Placeholder or should be generated by the server
        boxQty: int.tryParse(_boxQtyController.text) ?? 0,
        createdAt: DateTime.now(),
      );

      try {
        await DistributionService().createDistribution(distribution);
        widget.onCreated();
        Navigator.pop(context);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to create distribution')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Create Distribution')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _vehiclePlateController,
                decoration: InputDecoration(labelText: 'Vehicle Plate'),
                validator: (value) => value == null || value.isEmpty ? 'Please enter a vehicle plate' : null,
              ),
              TextFormField(
                controller: _dateController,
                decoration: InputDecoration(labelText: 'Date (YYYY-MM-DD)'),
                validator: (value) => value == null || value.isEmpty ? 'Please enter a date' : null,
              ),
              TextFormField(
                controller: _officerNameController,
                decoration: InputDecoration(labelText: 'Officer Name'),
                validator: (value) => value == null || value.isEmpty ? 'Please enter an officer name' : null,
              ),
              TextFormField(
                controller: _boxQtyController,
                decoration: InputDecoration(labelText: 'Box Quantity'),
                keyboardType: TextInputType.number,
                validator: (value) => value == null || value.isEmpty ? 'Please enter a box quantity' : null,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _createDistribution,
                child: Text('Create'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}*/
